from tkinter import *
import numpy as np
import scipy.integrate as spi  
import matplotlib.pyplot as plt
from PIL import Image,ImageTk
    
def leapFrog(event):
    
    plt.clf()
    
    h = 0.001
    min_t = 0.0
    max_t = int(slide3.get())

    n_puntos = int((max_t - min_t) / h)

    t = np.zeros(n_puntos) 

    # Tiempo 

    t[0] = min_t
    t[1]= min_t + h

    # Constantes 1
    betha_1 = float(slide2.get())
    gamma_1 = float(slide1.get())

    # Arrays 
    S_1 = np.zeros(n_puntos)
    I_1 = np.zeros(n_puntos)
    R_1 = np.zeros(n_puntos)

    def S_prima_1(S, I):
        return -betha_1*I*S

    def I_prima_1(S, I):
        return betha_1*I*S-gamma_1*I

    def R_prima_1(I):
        return gamma_1*I

    # Condiciones iniciales 

    #N = int(slider4.val) + int(slider5.val)
    I_1[0] = int(slide5.get())
    S_1[0] = int(slide4.get())
    R_1[0] = 0.0
    
    plt.axis([0, max_t, 0, S_1[0] + 20])

    # Primer paso 

    S_1[1] = S_1[0] + h*S_prima_1(S_1[0], I_1[0])
    I_1[1] = I_1[0] + h*I_prima_1(S_1[0], I_1[0])
    R_1[1] = R_1[0] + h*R_prima_1(I_1[0])

    # Integracion 

    for i in range(2, n_puntos):
        t[i] = t[i-1] + h
        S_1[i] = S_1[i-2] + 2*h*S_prima_1(S_1[i-1], I_1[i-1])
        I_1[i] = I_1[i-2] + 2*h*I_prima_1(S_1[i-1], I_1[i-1])
        R_1[i] = R_1[i-2] + 2*h*R_prima_1(I_1[i-1])

    SIR = ["Susceptibles", "Infectados", "Recuperados"]
    SIR_1 = [S_1, I_1, R_1]

    for sir_1, sir in zip(SIR_1, SIR):
        plt.plot(t, sir_1, label=sir)
        plt.legend(loc="upper right")
        plt.xlabel("Tiempo (Horas)")
        plt.ylabel("Población")
        plt.title("Método de Leap Frog (Ecuaciones diferenciales finitas)")
    
    plt.show()

def verlet(event):
    
    plt.clf()
    
    
    beta = float(slide2.get())
    TS = 1.0  
    ND = int(slide3.get()) 
    S0 = int(slide4.get())   
    I0 = int(slide5.get()) 
    INPUT = (S0, I0)  
    
    plt.axis([0, ND, 0, S0 + 20])
    
    def diff_eqs(INP,t):  
  
        Y=np.zeros((2))  
        V = INP  
        Y[0] = - beta * V[0] * V[1]  
        Y[1] = beta * V[0] * V[1] 
        return Y 
    
    t_start = 0.0; t_end = ND; t_inc = TS  
    t_range = np.arange(t_start, t_end+t_inc, t_inc)  
    RES = spi.odeint(diff_eqs,INPUT,t_range)  
    
    #Ploting   
    plt.plot(RES[:,1], '-r', label='Infectados')  
    plt.plot(RES[:,0], '-g', label='Susceptibles') 
    plt.legend(loc="upper right")
    plt.xlabel("Tiempo (Horas)")
    plt.ylabel("Población")
    plt.title("Método de Verlet") 
    
    plt.show()
    
def epidemologico(event):
    
    plt.clf()
    
    
    beta = float(slide2.get())
    gamma = float(slide1.get()) 
    TS = 1.0  
    ND = int(slide3.get()) 
    S0 = int(slide4.get())   
    I0 = int(slide5.get()) 
    INPUT = (S0, I0, 0.0)  
    
    plt.axis([0, ND, 0, S0 + 20])
    
    def diff_eqs(INP,t):  
        Y=np.zeros((3))  
        V = INP  
        Y[0] = - beta * V[0] * V[1]  
        Y[1] = beta * V[0] * V[1] - gamma * V[1]  
        Y[2] = gamma * V[1]  
        return Y   # For odeint  
    
    t_start = 0.0; t_end = ND; t_inc = TS  
    t_range = np.arange(t_start, t_end+t_inc, t_inc)  
    RES = spi.odeint(diff_eqs,INPUT,t_range)  
    
    #Ploting  
    plt.plot(RES[:,1], '-r', label='Infectados')  
    plt.plot(RES[:,0], '-g', label='Susceptibles')  
    plt.plot(RES[:,2], '-k', label='Recuperados')  
    plt.legend(loc="upper right")  
    plt.title('Método de SIR Exacto')  
    plt.xlabel('Tiempo (Horas)')  
    plt.ylabel('Población')
    
    plt.show()
    
def comparacion(event):

    h = 0.1
    min_t = 0.0
    max_t = int(slide3.get())
    n_puntos = int((max_t - min_t) / h)
    t = np.zeros(n_puntos) 

    # Tiempo 

    t[0] = min_t
    t[1]= min_t + h

    # Constantes 1
    betha_1 = float(slide2.get())
    gamma_1 = float(slide1.get())

    # Arrays 
    S_1 = np.zeros(n_puntos)
    I_1 = np.zeros(n_puntos)
    R_1 = np.zeros(n_puntos)

    def S_prima_1(S, I):
        return -betha_1*I*S

    def I_prima_1(S, I):
        return betha_1*I*S-gamma_1*I

    def R_prima_1(I):
        return gamma_1*I

    # Condiciones iniciales 

    #N = int(slider4.val) + int(slider5.val)
    I_1[0] = int(slide5.get())
    S_1[0] = int(slide4.get())
    R_1[0] = 0.0

    plt.axis([0, max_t, 0, S_1[0] + 20])

    # Primer paso 

    S_1[1] = S_1[0] + h*S_prima_1(S_1[0], I_1[0])
    I_1[1] = I_1[0] + h*I_prima_1(S_1[0], I_1[0])
    R_1[1] = R_1[0] + h*R_prima_1(I_1[0])

    # Integracion 

    for i in range(2, n_puntos):
        t[i] = t[i-1] + h
        S_1[i] = S_1[i-2] + 2*h*S_prima_1(S_1[i-1], I_1[i-1])
        I_1[i] = I_1[i-2] + 2*h*I_prima_1(S_1[i-1], I_1[i-1])
        R_1[i] = R_1[i-2] + 2*h*R_prima_1(I_1[i-1])
        print("S - I - R: ", S_1[i], I_1[i], R_1[i])

    SIR = ["Susceptibles LF", "Infectados LF", "Recuperados LF"]
    SIR_1 = [S_1, I_1, R_1]

    for sir_1, sir in zip(SIR_1, SIR):
        plt.plot(t, sir_1, label=sir)
        plt.legend(loc="upper right")
        plt.xlabel("Tiempo (Horas)")
        plt.ylabel("Población")

    beta = float(slide2.get())
    gamma = float(slide1.get()) 
    TS = 1.0  
    ND = int(slide3.get()) 
    S0 = int(slide4.get())   
    I0 = int(slide5.get()) 
    INPUT = (S0, I0, 0.0)  

    plt.axis([0, ND, 0, S0 + 20])

    def diff_eqs(INP,t):  
        Y=np.zeros((3))  
        V = INP  
        Y[0] = - beta * V[0] * V[1]  
        Y[1] = beta * V[0] * V[1] - gamma * V[1]  
        Y[2] = gamma * V[1]  
        return Y   # For odeint  

    t_start = 0.0; t_end = ND; t_inc = TS  
    t_range = np.arange(t_start, t_end+t_inc, t_inc)  
    RES = spi.odeint(diff_eqs,INPUT,t_range)  

    # print("I:", RES[:,1])
    # print("S:", RES[:,0])
    # print("R:", RES[:,2])

    #Ploting  
    plt.plot(RES[:,1], '-r', label='Infectados Exc')  
    plt.plot(RES[:,0], '-g', label='Susceptibles Exc')  
    plt.plot(RES[:,2], '-k', label='Recuperados Exc')  
    plt.legend(loc="upper right")  
    plt.title('Método de SIR Exacto')  
    plt.xlabel('Tiempo (Horas)')  
    plt.ylabel('Población')

    plt.title("Comparación modelos SIR")
    plt.show()
    
#----------------------------------------Creación del GUI--------------------------------------------

root = Tk()
root.title("GUI Slider")

w = Label(root, text = "Control de Parámetros \n Propagación de Virus Informático",font = ('Helvetica ld', 20))
w.pack()

w = Label(root, text ="Gamma")
w.pack()
slide1 = Scale(root, from_ = 0,to=1,resolution=0.01,orient=HORIZONTAL,length=300,highlightcolor="#2D64F5")
slide1.pack()

w = Label(root, text ="Beta")
w.pack()
slide2 = Scale(root, from_ = 0,to=0.005,resolution=0.001,orient=HORIZONTAL,length=300)
slide2.pack()

w = Label(root, text ="Tiempo")
w.pack()
slide3 = Scale(root, from_ = 0,to=35,resolution=0.5,orient=HORIZONTAL,length=300)
slide3.pack()  

w = Label(root, text ="Suceptibles")
w.pack()
slide4 = Scale(root, from_ = 0,to=1000,resolution=1,orient=HORIZONTAL,length=300)
slide4.pack() 

w = Label(root, text ="Infectados")
w.pack()
slide5 = Scale(root, from_ = 0,to=20,resolution=1,orient=HORIZONTAL,length=300)
slide5.pack() 

w = Label(root, text ="\n",font = ('Helvetica ld',5))
w.pack()
btn1 = Button(root,text="Ejecutar Leap Frog",  bg="#3E8EAD",width=25)
btn1.bind("<Button-1>", leapFrog) 
btn1.pack()  

w = Label(root, text ="\n",font = ('Helvetica ld',5))
w.pack()
btn2= Button(root,text="Ejecutar Verlet",  bg="#3E8EAD",width=25)
btn2.bind("<Button-1>", verlet) 
btn2.pack()

w = Label(root, text ="\n",font = ('Helvetica ld',5))
w.pack()
btn3= Button(root,text="Ejecutar Modelo Epidemologico",  bg="#3E8EAD",width=25)
btn3.bind("<Button-1>", epidemologico) 
btn3.pack()  

w = Label(root, text ="\n",font = ('Helvetica ld',5))
w.pack()
btn4= Button(root,text="Comparación modelo SIR ",  bg="#3E8EAD",width=25)
btn4.bind("<Button-1>", comparacion) 
btn4.pack()  

root.mainloop()